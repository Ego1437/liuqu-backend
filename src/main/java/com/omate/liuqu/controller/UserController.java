package com.omate.liuqu.controller;

import com.omate.liuqu.dto.*;
import com.omate.liuqu.model.*;
import com.omate.liuqu.repository.*;
import com.omate.liuqu.service.*;
import com.omate.liuqu.utils.*;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import jakarta.persistence.EntityNotFoundException;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/api") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserService userService;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private BCryptPasswordEncoder passwordEncoder;

    @Autowired
    private StringRedisTemplate redisTemplate;

    /**
     * *
     * 
     * @param user
     * @return userDTO
     */
    public UserDTO convertToDto(User user) {
        UserDTO userDTO = new UserDTO();
        userDTO.setUserId(user.getUserId());
        userDTO.setUserName(user.getUserName());
        userDTO.setUserEmail(user.getUserEmail());
        userDTO.setUserTel(user.getUserTel());
        userDTO.setGender(user.getGender());
        userDTO.setAge(user.getAge());
        userDTO.setAvatarPath(user.getAvatar());
        userDTO.setPostcode(user.getPostcode());
        userDTO.setAddress(user.getAddress());
        userDTO.setIsSubscribe(user.getIsSubscribe());
        return userDTO;
    }

    @PostMapping("/login")
    public ResponseEntity<Result> loginUser(@RequestParam String phoneNumber, @RequestParam String password) {
        Result result = new Result();
        try {
            LoginResponse response = userService.loginUser(phoneNumber, password);
            if (response.getAccessToken() == "1"){
                result.setResultFailed(1); // 使用0作为成功代码，您可以根据需要更改这个值
            }else {
                result.setResultSuccess(0, response);
            }
            return ResponseEntity.ok(result);
        } catch (Exception e) {
            result.setResultFailed(10, "Login failed: " + e.getMessage());
            return ResponseEntity.badRequest().body(result);
        }
    }

    @PostMapping("/register")
    public ResponseEntity<Result> registerUser(@RequestParam String phoneNumber,
                                                      @RequestParam String password,
                                                      @RequestParam String verificationCode) {
        Result result = new Result();
        try {
            LoginResponse response = userService.registerUser(phoneNumber, password, verificationCode);
            if (response.getAccessToken() == "User has been registered"){
                result.setResultFailed(2); // 使用0作为成功代码，您可以根据需要更改这个值
            }else {
                result.setResultSuccess(0, response);
            }
            return ResponseEntity.ok(result);

        } catch (IllegalArgumentException e) {
            result.setResultFailed(4);
            return ResponseEntity.badRequest().body(result);
        }
    }


}