# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: Build and Publish to ECR

on:
  workflow_dispatch:
  release:
    types: [created]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout project sources
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file

#      - name: Build with Gradle
#        uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
#        with:
#          arguments: buildTodoCoderJar

      - name: Build with build.sh
        run: |
          ./build.sh prod

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: liuqu-backend
          IMAGE_TAG: latest
        run: |
          # Build a docker container and push it to ECR
          docker build -t liuqu-backend -f ./docker/springboot/Dockerfile .
          docker tag liuqu-backend:latest 992382689127.dkr.ecr.ap-southeast-2.amazonaws.com/liuqu-backend:latest
          echo "Pushing image to ECR..."
          docker push 992382689127.dkr.ecr.ap-southeast-2.amazonaws.com/liuqu-backend:latest
#      - name: Push to ECR
#        id: ecr
#        uses: jwalton/gh-ecr-push@v1
#        with:
#          access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          region: us-east-1
#          local-image: liuqu-backend
#          image: liuqu-backend:dev-${{ github.sha }}
#      - name: Log in to the Container registry
#        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
#        with:
#          registry: ${{ env.REGISTRY }}
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Extract metadata (tags, labels) for Docker
#        id: meta
#        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
#        with:
#          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#
#      - name: Build Docker Image
#        uses: docker/build-push-action@v5
#        with:
#          context: .
#          file: ./docker/springboot/Dockerfile
#          push: true
#          tags: ${{ steps.meta.outputs.tags }}
#          labels: ${{ steps.meta.outputs.labels }}
#
#      # The USERNAME and TOKEN need to correspond to the credentials environment variables used in
#      # the publishing section of your build.gradle
#      - name: Publish to GitHub Packages
#        uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
#        with:
#          arguments: publish
#        env:
#          USERNAME: ${{ github.actor }}
#          TOKEN: ${{ secrets.GITHUB_TOKEN }}

#      - uses: actions/checkout@v2
#      - name: Deploy to EC2
#        env:
#          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
#          HOSTNAME: ${{ secrets.SSH_HOST }}
#          USERNAME: ${{ secrets.USERNAME }}
#          TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#        run: |
#          mkdir -p ~/.ssh/
#          echo "-----BEGIN RSA PRIVATE KEY-----
#          !!! REPLACE THIS WITH YOUR PRIVATE KEY !!!
#          -----END RSA PRIVATE KEY-----" | tr -d '\r' > ~/.ssh/github-actions-key
#          chmod 600 ~/.ssh/github-actions-key
#          cat >>~/.ssh/config <<END
#          Host ec2
#            HostName ec2-13-211-15-220.ap-southeast-2.compute.amazonaws.com
#            User ec2-user
#            IdentityFile ~/.ssh/github-actions-key
#            StrictHostKeyChecking no
#          END
#          echo "$TOKEN" > github_token && chmod 600 github_token
#          #scp -i private_key ./github_token ${USERNAME}@${HOSTNAME}:~
#          scp ./github_token ec2:~
#          #ssh -o StrictHostKeyChecking=no -i private_key ${USERNAME}@${HOSTNAME} '
#          ssh ec2 'cat ./github_token | sudo docker login ghcr.io -u USERNAME --password-stdin'
#          ssh ec2 'sudo docker pull ghcr.io/adamuomate/liuqu-backend:develop-ada'
#          ssh ec2 'sudo docker run -d --name=springboot-liuqu --add-host host.docker.internal:host-gateway -p 8083:8080 ghcr.io/adamuomate/liuqu-backend:develop-ada'
#          ssh ec2 'sudo docker ps -a'
