plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.2'
	id 'io.spring.dependency-management' version '1.1.2'
	id 'maven-publish'
}



group = 'com.omate'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
	targetCompatibility = '17'
}

repositories {
	// Gradle没有自己的中央仓库
	// 先从本地maven仓库寻找依赖的jar包，存在则直接使用本地maven仓库的jar
	mavenLocal()
	// 本地maven仓库没有则从远程仓库下载jar包，并保存到 环境变量GRADLE_USER_HOME 配置的路径下
	// 设置maven仓库阿里镜像地址
	maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
	// 配置使用Maven的中央仓库
	mavenCentral()
}

dependencies {
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
//	implementation 'android.arch.work:work-runtime:1.0.1'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2' // or gson if you prefer Gson
// Jackson Databind for JSON processing
	implementation 'com.fasterxml.jackson.core:jackson-databind'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'mysql:mysql-connector-java:8.0.23'
	implementation group: 'software.aws.rds', name: 'aws-mysql-jdbc', version: '1.1.9'
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	//S3
	implementation platform('com.amazonaws:aws-java-sdk-bom:1.12.529')
	implementation 'com.amazonaws:aws-java-sdk-s3'
	implementation 'commons-io:commons-io:2.1'
	// Validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	// JWT
	// implementation 'io.jsonwebtoken:jjwt:0.9.1'
	implementation 'com.auth0:java-jwt:4.4.0'
	// Jackson
	implementation 'com.fasterxml.jackson.core:jackson-core:2.12.5'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.5'
	// Mail
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'jakarta.mail:jakarta.mail-api:2.1.2'

	implementation 'org.springframework.boot:spring-boot-starter-security'
	compileOnly 'org.projectlombok:lombok:1.18.22'
	annotationProcessor 'org.projectlombok:lombok:1.18.22'

	testCompileOnly 'org.projectlombok:lombok:1.18.22'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'

	// 添加 dotenv-java 库
	implementation 'io.github.cdimascio:dotenv-java:2.2.0'
}

dependencyManagement {
	imports {
		mavenBom 'com.amazonaws:aws-java-sdk-bom:1.12.529'
	}
}

tasks.named('test') {
	useJUnitPlatform()
}



// 为不同环境定义任务，复制并重命名相应的配置文件
task prepareProdProperties(type: Copy) {
	from 'src/main/resources'
	include 'application.prod.properties'
	rename 'application.prod.properties', 'application.properties'
	into 'build/resources/main'
}

task prepareTestProperties(type: Copy) {
	from 'src/main/resources'
	include 'application.test.properties'
	rename 'application.test.properties', 'application.properties'
	into 'build/resources/main'
}

tasks.named('resolveMainClassName').configure {
	if (project.hasProperty('prod')) {
		dependsOn 'prepareProdProperties'
	} else if (project.hasProperty('test')) {
		dependsOn 'prepareTestProperties'
	}
}

// 修改bootJar任务，在执行之前选择和准备正确的配置文件
bootJar {
//	dependsOn selectProperties
	// 当运行selectProperties时，不直接执行任务，而是声明任务依赖
	if (project.hasProperty('prod')) {
		dependsOn 'prepareProdProperties'
	} else if (project.hasProperty('test')) {
		dependsOn 'prepareTestProperties'
	}
}

// 确保在资源处理之前排除所有的application*.properties文件
processResources {
	exclude '**/application*.properties'
}

def jarname = String.format("%s-%s.jar",project.name,version)
// 拷贝文件 dependsOn: bootJar 依赖springboot 插件的 bootJar打包命令
task copyConfigFile(type: Copy, dependsOn: bootJar) {
	// 清除app目录的历史文件
	delete "docker/springboot/app/"
	// copy jar包 从 build/libs/ 目录到 app/ 目录
	from('build/libs/' + jarname)
	into 'docker/springboot/app/'
	// 重命名成我们要的名字
	rename(jarname, project.name + '.jar')
}

task buildTodoCoderJar(dependsOn: clean) {
	dependsOn copyConfigFile
	doLast {
		if (project.hasProperty('prod')) {
			println 'Production properties file selected.'
		} else if (project.hasProperty('test')) {
			println 'Test properties file selected.'
		} else {
			println 'No specific properties file selected; default configuration applied.'
		}
	}
}

publishing {
	repositories {
		maven {
			name = "GitHubPackages"
			url = uri("https://maven.pkg.github.com/Ego1437/liuqu-backend")
			credentials {
				username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
				password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
			}
		}
	}
	publications {
		gpr(MavenPublication) {
			from(components.java)
		}
	}
}
